[{"/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/index.js":"1","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/App.js":"2","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/IssueListError.js":"3","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/IssueList.js":"4","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/PaginationBar.js":"5","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/Nav.js":"6","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/SearchForm.js":"7","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/IssueModal.js":"8","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/IssueModalError.js":"9"},{"size":199,"mtime":1610286848098,"results":"10","hashOfConfig":"11"},{"size":6272,"mtime":1610287394171,"results":"12","hashOfConfig":"11"},{"size":523,"mtime":1610286848097,"results":"13","hashOfConfig":"11"},{"size":1142,"mtime":1610286848097,"results":"14","hashOfConfig":"11"},{"size":586,"mtime":1610286848098,"results":"15","hashOfConfig":"11"},{"size":607,"mtime":1610286848098,"results":"16","hashOfConfig":"11"},{"size":432,"mtime":1610286848098,"results":"17","hashOfConfig":"11"},{"size":1869,"mtime":1610287134619,"results":"18","hashOfConfig":"11"},{"size":466,"mtime":1610286848097,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"eofs0l",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},"/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/index.js",[],["45","46"],"/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/App.js",["47"],"import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container } from \"react-bootstrap\";\nimport IssueList from \"./components/IssueList\";\nimport Nav from \"./components/Nav\";\nimport SearchForm from \"./components/SearchForm\";\nimport IssueModal from \"./components/IssueModal\"\nimport IssueListError from \"./components/IssueListError\"\nimport BounceLoader from \"react-spinners/BounceLoader\";\nimport PaginationBar from './components/PaginationBar';\n\nfunction App() {\n  const issuesPerPage = 30; // GitHub default size\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [issues, setIssues] = useState([]);\n  const [url, setUrl] = useState(\n    `https://api.github.com/repos/facebook/react/issues`\n  );\n  // const [url, setUrl] = useState('');\n  const [selectedIssue, setSelectedIssue] = useState({});\n  const [showModal, setShowModal] = useState(false);\n  const [hasError, setHasError] = useState(false)\n  const [loading, isLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalIssuesCount, setTotalIssuesCount] = useState(1);\n  const [finalQuery,setFinalQuery] = useState('');\n\n  const [urlComment, setUrlComment] = useState('');\n  const [comments, setComments] = useState([]);\n  const [pageComment, setPageComment] = useState(0);\n\n\n  const handleCloseModal = () => setShowModal(false);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n      if (url !== \"\") {\n        let result = await fetch(url);\n        let json = await result.json();\n        if(Array.isArray(json)){\n          setIssues(json);\n          setHasError(false);\n        }\n        else{\n          setIssues([]);\n          setHasError(true);\n        }\n        setTimeout(() => isLoading(false), 2000);\n        setUrl('');\n      }\n      } catch {\n        setHasError(true)\n      }\n    }\n    fetchData();\n  }, [url]);\n  useEffect(()=>{\n    async function fetchTotalIssuesCount(){\n      if(finalQuery !== \"\"){\n        let data = await fetch(`https://api.github.com/repos/${finalQuery}`);\n        let json = await data.json();\n        let totalIssues = json.open_issues_count\n        console.log(\"Total issues\", totalIssues);\n        if(totalIssues !== undefined){\n          setTotalIssuesCount(totalIssues);\n        }\n      }\n    }\n    fetchTotalIssuesCount();\n  },[finalQuery])\n\n  useEffect(()=>{\n    async function fetchComments(){\n      if(urlComment !== \"\"){\n        let data = await fetch(`${urlComment}?per_page=5&page=${pageComment}`);\n        let json = await data.json();\n        let newArray = [...comments, ...json]\n        setComments(newArray);\n      }\n    }\n    fetchComments();\n  },[urlComment, pageComment])\n\n  const handleClick = () => {\n    setCurrentPage(1);\n    if(searchTerm === \"\" || !searchTerm.includes('/')){\n      return;\n    }\n    let searchTermMatching = simpleFuzzyMatching(searchTerm);\n    setSearchTerm(searchTermMatching);\n    setUrl(`https://api.github.com/repos/${searchTermMatching}/issues`);\n    setFinalQuery(searchTermMatching);\n    isLoading(true);\n  };\n  const simpleFuzzyMatching =  (input) => {\n    const array = input.split('/');\n    if(array.length === 2){\n      return array.join('/');\n    }\n    if(array.length >= 2){\n      return array.slice(-2).join('/');\n    }\n  }\n  const handleChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const handleIssueClick = (issue) => {\n    setSelectedIssue(issue)\n    setShowModal(true)\n    setUrlComment(issue.comments_url);\n    setPageComment(1);\n    setComments([]);\n  }\n  const handleChangePage = (page)=>{\n    setCurrentPage(page);\n    setUrl(`https://api.github.com/repos/${searchTerm}/issues?page=${page}`)\n    isLoading(true);\n  }\n  const handleLoadComments = ()=> {\n    setPageComment(pageComment + 1);\n  }\n\n  return (\n    <>\n    <Nav />\n    <Container>\n      <SearchForm\n        handleChange={handleChange}\n        handleClick={handleClick}\n        value={searchTerm}\n      />\n      <PaginationBar \n        totalIssuesCount={totalIssuesCount} \n        issuesPerPage={issuesPerPage} \n        currentPage = {currentPage} \n        clicked = {handleChangePage}/>\n      {!loading && (<>\n      {!hasError && (<IssueList issues={issues} handleIssueClick={handleIssueClick}/>)}\n      {hasError && <IssueListError hasError={hasError}></IssueListError>}\n      <IssueModal showModal={showModal} handleCloseModal={handleCloseModal} issue={selectedIssue} comments = {comments} handleLoadComments={handleLoadComments}/></>)}\n      {loading && (<BounceLoader></BounceLoader>)}\n      \n    </Container>\n    </>\n  );\n}\n\nexport default App;\n\n// - [X] The user can enter a repository in a search bar, click \"search\", and see the associated issues. The repository should be of the format `owner/repo-name`, e.g. `facebook/react`.\n// - [X] If the repository does not exist, the user should see a proper error message.\n// - [X] The user should be able to see the following information for each issue:\n//   - Issue Title with Number of the issue\n//   - Owner of the Issue\n//   - Owner Avatar\n//   - How long ago the issue was updated in a human-friendly format (e.g. 2 days ago)\n//   - Body of the Issue\n//   - Labels of the issue\n// - [X] The user should be able to see multiple pages of results, by clicking a pagination control\n\n\n// optionals\n// [X] The user can see more details (including 5 comments of the issue) in a modal that's opened by clicking on the title of the issue.\n// [X] The user should be able to see the body of the issue rendered in markdown. (Hint: react-markdown)\n// [X] Fetching is an asynchronous operation, so you should display a loading spinner whenever the app loads data, and hide it once the corresponding API call has been completed.\n// [X] Input Fuzzy Matching: the user should be able to type in either https://github.com/facebook/react or facebook/react, BOTH should work.\n// [] In the Issue Detail Modal, let implement an infinite pagination with a \"Show More\" button: Fetch 5 more comments whenever user clicks on the button. The button is disabled or hidden when all the comments have been loaded.\n// [] Users can create a new issue. (Danger Warning: If you attempt this task, please do so on a private repository. Don't spam the official facebook/react repo!)","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/IssueListError.js",["48"],"import React, { useState } from 'react'\nimport Alert from 'react-bootstrap/Alert'\n\nfunction IssueListError({setHasError}) {\n    const [show, setShow] = useState(true)\n    \n    return (\n        <Alert variant=\"danger\" onClose={() => setShow(false) && setHasError(false)} dismissible>\n          <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n          <p>\n            Perhpas there are no Issues here. Try searching with 'owner/repo-name' .\n          </p>\n        </Alert>\n      );\n}\n\nexport default IssueListError","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/IssueList.js",["49"],"import React from \"react\";\nimport { ListGroup, Row, Col, Figure, Badge } from \"react-bootstrap\";\nimport ReactMarkdown from \"react-markdown\"\nimport moment from 'moment';\nconst fontColorContrast = require('font-color-contrast');\n\n\nconst IssueList = ({ issues, handleIssueClick }) => {\n  return (\n    <>\n      <h2>Issue List</h2>\n      <ListGroup>\n        {issues.map((i) => (\n          <ListGroup.Item key={i.id} action>\n            <Col><Row className=\"mx-auto\">\n              <a href=\"#\" onClick={() => handleIssueClick(i)}><ReactMarkdown source={i.title}/>\n              </a><Col className=\"d-flex-column\">{i.labels.map(o => (<Badge style={{ backgroundColor: `#${o.color}`, color:`${fontColorContrast(`#${o.color}`)}`}} pill>{o.name}</Badge>))}</Col></Row></Col>\n              <Row className=\"mx-auto\">#{i.number}{\" \"}opened{\" \"}{moment(i.updated_at).fromNow()}{\" \"}by{\" \"}<Col>{i.user.login}<Figure.Image width={20}\n           height={20} src={i.user.avatar_url} alt={i.user.avatar_url} thumbnail={true} rounded/></Col>\n            </Row>\n          </ListGroup.Item>\n        ))}\n      </ListGroup>\n    </>\n  );\n};\n\nexport default IssueList;","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/PaginationBar.js",[],"/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/Nav.js",[],"/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/SearchForm.js",[],"/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/IssueModal.js",["50"],"import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport ReactMarkdown from \"react-markdown\";\nimport IssueModalError from \"./IssueModalError\"\n\n\n\n\nfunction IssueModal({showModal, handleCloseModal, issue, comments, handleLoadComments, disableLoadMore}) {\n    // const [comments, setComments] = useState([])\n    // const [hasError, setHasError] = useState(false)\n\n    // useEffect(() => {\n    //     async function fetchData() {\n    //         try {\n    //             if(issue && issue.comments_url) {\n    //                 let response = await fetch(issue.comments_url)\n    //                 let data = await response.json()\n    //                 setComments(data)\n    //             }\n    //             fetchData()\n    //         } catch {\n    //             setHasError(true)\n    //         }\n    //     } \n    //     // fetchData();\n    // }, [issue])\n\n  return (\n      <>\n      {/* {!hasError && (  */}\n        <Modal show={showModal} onHide={handleCloseModal} size=\"xl\">\n          <Modal.Header closeButton>\n            <Modal.Title>{issue.title}</Modal.Title>\n          </Modal.Header>\n          <Modal.Body><ReactMarkdown key={issue.key} source={issue.body}/></Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleCloseModal}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={handleCloseModal}>\n              Save Changes\n            </Button>\n            <Modal.Body><ul>{comments.map(c =><li><ReactMarkdown key={c.key} source={c.body}/></li>)}</ul></Modal.Body>\n            <Button variant=\"primary\" onClick={handleLoadComments} disabled = {disableLoadMore}>Load Comments</Button>\n          </Modal.Footer>\n          </Modal>\n      {/* )} */}\n\n      {/* {hasError && <IssueModalError></IssueModalError>} */}\n      </>\n  );\n}\n\nexport default IssueModal;","/Users/xiuxiu/Documents/CoderSchool/Week4/github-issues-team3/src/components/IssueModalError.js",["51","52"],"import React, { useState } from 'react'\nimport Alert from 'react-bootstrap/Alert'\n\nfunction IssueModalError({}) {\n    const [show, setShow] = useState(true)\n\n    return (\n        <Alert variant=\"danger\" onClose={() => setShow(false)} dismissible>\n          <Alert.Heading>Oh snap! You got an error!</Alert.Heading>\n          <p>\n            Perhpas this Issue has been removed. Try another. \n          </p>\n        </Alert>\n      );\n}\n\nexport default IssueModalError",["53","54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":84,"column":5,"nodeType":"61","endLine":84,"endColumn":30,"suggestions":"62"},{"ruleId":"63","severity":1,"message":"64","line":5,"column":12,"nodeType":"65","messageId":"66","endLine":5,"endColumn":16},{"ruleId":"67","severity":1,"message":"68","line":16,"column":15,"nodeType":"69","endLine":16,"endColumn":63},{"ruleId":"63","severity":1,"message":"70","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":23},{"ruleId":"71","severity":1,"message":"72","line":4,"column":26,"nodeType":"73","messageId":"74","endLine":4,"endColumn":28},{"ruleId":"63","severity":1,"message":"64","line":5,"column":12,"nodeType":"65","messageId":"66","endLine":5,"endColumn":16},{"ruleId":"55","replacedBy":"75"},{"ruleId":"57","replacedBy":"76"},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'comments'. Either include it or remove the dependency array.","ArrayExpression",["79"],"no-unused-vars","'show' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'IssueModalError' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["77"],["78"],"no-global-assign","no-unsafe-negation",{"desc":"80","fix":"81"},"Update the dependencies array to be: [urlComment, pageComment, comments]",{"range":"82","text":"83"},[2693,2718],"[urlComment, pageComment, comments]"]